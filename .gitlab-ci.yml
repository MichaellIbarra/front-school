# GitLab CI/CD Pipeline para EduAssist Frontend
# Este pipeline construye la aplicaci√≥n React y publica la imagen Docker en Docker Hub

# Variables globales
variables:
  # Nombre de la imagen Docker
  DOCKER_IMAGE_NAME: "vg-web-school"
  # Registro de Docker Hub (puede ser tu username o tu organizaci√≥n)
  DOCKER_REGISTRY: "docker.io"
  # Versi√≥n de Node.js para el build
  NODE_VERSION: "20"
  # Configuraciones de Docker
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: "/certs"
  DOCKER_BUILDKIT: 1

# Etapas del pipeline
stages:
  - test
  - build
  - deploy

# Cache para optimizar builds
cache:
  paths:
    - node_modules/
    - .npm/

# Etapa de pruebas y linting
test:
  stage: test
  image: node:${NODE_VERSION}-alpine
  before_script:
    - npm ci --cache .npm --prefer-offline --legacy-peer-deps
  script:
    - echo "üß™ Ejecutando pruebas..."
    - npm run lint || echo "‚ö†Ô∏è Linting failed, but continuing..."
    - npm test -- --coverage --ci --silent --passWithNoTests --watchAll=false
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage/cobertura-coverage.xml
    expire_in: 1 week
  only:
    - branches
  except:
    - tags

# Etapa de construcci√≥n y publicaci√≥n Docker
build_and_push:
  stage: build
  image: docker:24-dind
  services:
    - docker:24-dind
  variables:
    # Configuraci√≥n para Docker-in-Docker
    DOCKER_HOST: tcp://docker:2376
    DOCKER_TLS_CERTDIR: "/certs"
    DOCKER_TLS_VERIFY: 1
    DOCKER_CERT_PATH: "$DOCKER_TLS_CERTDIR/client"
    DOCKER_BUILDKIT: 1
  before_script:
    # Verificar que las variables est√©n configuradas
    - |
      if [ -z "$DOCKER_HUB_USERNAME" ]; then
        echo "‚ùå ERROR: DOCKER_HUB_USERNAME no est√° configurado"
        exit 1
      fi
    - |
      if [ -z "$DOCKER_HUB_TOKEN" ]; then
        echo "‚ùå ERROR: DOCKER_HUB_TOKEN no est√° configurado"
        exit 1
      fi
    - echo "$DOCKER_HUB_TOKEN" | docker login $DOCKER_REGISTRY -u "$DOCKER_HUB_USERNAME" --password-stdin
  script:
    - echo "üì¶ Construyendo imagen Docker con BuildKit..."
    - |
      # Generar tags basados en la rama y commit
      if [ "$CI_COMMIT_REF_NAME" = "main" ] || [ "$CI_COMMIT_REF_NAME" = "master" ]; then
        TAGS="latest $CI_COMMIT_SHA"
      else
        TAGS="$CI_COMMIT_REF_NAME $CI_COMMIT_SHA"
      fi
    
    # Construir la imagen con BuildKit para mejor performance
    - |
      for tag in $TAGS; do
        full_tag="$DOCKER_HUB_USERNAME/$DOCKER_IMAGE_NAME:$tag"
        echo "ÔøΩÔ∏è Construyendo y publicando $full_tag"
        docker buildx build --push --platform linux/amd64 -t $full_tag .
      done
    
    - echo "‚úÖ Imagen publicada exitosamente en Docker Hub"
  after_script:
    - docker logout $DOCKER_REGISTRY || true
  timeout: 30m
  rules:
    - if: $CI_COMMIT_BRANCH
    - if: $CI_COMMIT_TAG

# Etapa de deployment (opcional - para tags de release)
deploy_production:
  stage: deploy
  image: alpine:latest
  script:
    - echo "üöÄ Desplegando versi√≥n $CI_COMMIT_TAG a producci√≥n..."
    - echo "Para ejecutar la imagen:"
    - echo "docker run -d -p 3000:80 --name vg-web-school $DOCKER_HUB_USERNAME/$DOCKER_IMAGE_NAME:$CI_COMMIT_TAG"
  only:
    - tags
  when: manual

# Despliegue autom√°tico para develop
deploy_develop:
  stage: deploy
  image: alpine:latest
  script:
    - echo "üöÄ Desplegando rama develop..."
    - echo "Comando para desplegar:"
    - echo "docker pull $DOCKER_HUB_USERNAME/$DOCKER_IMAGE_NAME:develop"
    - echo "docker stop eduassist-develop || true"
    - echo "docker rm eduassist-develop || true"
    - echo "docker run -d -p 3001:80 --name eduassist-develop --restart unless-stopped $DOCKER_HUB_USERNAME/$DOCKER_IMAGE_NAME:develop"
  only:
    - develop
  when: on_success

# Despliegue autom√°tico para main/master (producci√≥n)
deploy_main:
  stage: deploy
  image: alpine:latest
  script:
    - echo "üöÄ Desplegando a producci√≥n..."
    - echo "Comando para desplegar:"
    - echo "docker pull $DOCKER_HUB_USERNAME/$DOCKER_IMAGE_NAME:latest"
    - echo "docker stop vg-web-school || true"
    - echo "docker rm vg-web-school || true"
    - echo "docker run -d -p 3000:80 --name vg-web-school --restart unless-stopped $DOCKER_HUB_USERNAME/$DOCKER_IMAGE_NAME:latest"
  only:
    - main
    - master
  when: on_success

# Job para limpiar im√°genes locales (opcional)
cleanup:
  stage: deploy
  image: docker:24-dind
  services:
    - docker:24-dind
  script:
    - docker system prune -f
  when: manual
  allow_failure: true